{"version":3,"file":"index.modern.mjs","sources":["../src/data-table.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  useTable,\n  useSortBy,\n  useRowSelect,\n  TableInstance,\n  TableOptions,\n  CellProps,\n  HeaderGroup,\n  Hooks,\n  IdType,\n  SortingRule,\n} from 'react-table'\nimport {\n  chakra,\n  forwardRef,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Checkbox,\n} from '@chakra-ui/react'\n\nimport { cx, __DEV__ } from '@chakra-ui/utils'\n\nimport { TriangleDownIcon, TriangleUpIcon } from '@chakra-ui/icons'\n\nimport { Link } from '@saas-ui/layout'\n\nexport type { Column, TableInstance } from 'react-table'\n\nexport interface DataTableProps<Data extends object>\n  extends TableOptions<Data> {\n  /**\n   * Enable sorting on all columns\n   */\n  isSortable?: boolean\n  /**\n   * Enable row selection\n   */\n  isSelectable?: boolean\n  /**\n   * Triggers whenever the row selection changes.\n   * @params rows The selected row id's\n   */\n  onSelectedRowsChange?: (rows: IdType<Data>[]) => void\n  /**\n   * Triggers when sort changed.\n   * Use incombination with `manualSortBy` to enable remote sorting.\n   */\n  onSortChange?: (columns: SortingRule<Data>[]) => void\n}\n\nexport const DataTable = React.forwardRef(\n  <Data extends object>(\n    props: DataTableProps<Data>,\n    ref: React.ForwardedRef<TableInstance<Data>>\n  ) => {\n    const {\n      columns,\n      data,\n      initialState,\n      autoResetHiddenColumns,\n      stateReducer,\n      useControlledState,\n      getSubRows,\n      defaultColumn,\n      getRowId,\n      manualRowSelectKey,\n      autoResetSelectedRow,\n      isSortable,\n      isSelectable,\n      onSelectedRowsChange,\n      onSortChange,\n      colorScheme,\n      size,\n      variant,\n      className,\n      children,\n      ...rest\n    } = props\n\n    const instance = useTable<Data>(\n      {\n        columns: React.useMemo(() => {\n          return columns?.map((column: any) => {\n            if (!column.accessor) {\n              column.accessor = column.id\n            }\n            if (!column.Cell) {\n              column.Cell = DataTableCell\n            }\n            return column\n          })\n        }, []),\n        data,\n        initialState,\n        autoResetHiddenColumns,\n        stateReducer,\n        useControlledState,\n        defaultColumn,\n        getSubRows,\n        getRowId,\n        manualRowSelectKey,\n        autoResetSelectedRow,\n        ...rest,\n      },\n      useSortBy,\n      useRowSelect,\n      useCheckboxColumn(isSelectable)\n    )\n\n    // This exposes the useTable api through the forwareded ref\n    React.useImperativeHandle(ref, () => instance, [ref])\n\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n      state,\n    } = instance\n\n    React.useEffect(() => {\n      onSelectedRowsChange?.(Object.keys(state.selectedRowIds))\n    }, [onSelectedRowsChange, state.selectedRowIds])\n\n    React.useEffect(() => {\n      onSortChange?.(state.sortBy)\n    }, [onSortChange, state.sortBy])\n\n    return (\n      <Table\n        {...getTableProps()}\n        sx={{ 'tr:last-child td': { border: 0 } }}\n        className={cx('saas-data-table', className)}\n        colorScheme={colorScheme}\n        size={size}\n        variant={variant}\n      >\n        <Thead>\n          {headerGroups.map((headerGroup) => (\n            <Tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <DataTableHeader\n                  key={column.id}\n                  column={column}\n                  isSortable={isSortable}\n                />\n              ))}\n            </Tr>\n          ))}\n        </Thead>\n        <Tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <Tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <Td\n                      {...cell.getCellProps()}\n                      overflow=\"hidden\"\n                      whiteSpace=\"nowrap\"\n                      textOverflow=\"ellipsis\"\n                      isNumeric={cell.column.isNumeric}\n                    >\n                      {cell.render('Cell') as React.ReactNode}\n                    </Td>\n                  )\n                })}\n              </Tr>\n            )\n          })}\n        </Tbody>\n      </Table>\n    )\n  }\n) as (<Data extends object>(\n  props: DataTableProps<Data> & {\n    ref?: React.ForwardedRef<TableInstance<Data>>\n  }\n) => React.ReactElement) & { displayName?: string }\n\nif (__DEV__) {\n  DataTable.displayName = 'DataTable'\n}\n\nexport interface DataTableSortProps<Data extends object> {\n  column: HeaderGroup<Data>\n}\nexport const DataTableSort = <Data extends object>(\n  props: DataTableSortProps<Data>\n) => {\n  const { column, ...rest } = props\n\n  const sorterStyles = {\n    ms: 2,\n  }\n\n  if (column.id === 'selection') {\n    return null\n  }\n\n  return (\n    <chakra.span __css={sorterStyles} {...rest}>\n      {column.isSorted ? (\n        column.isSortedDesc ? (\n          <TriangleDownIcon aria-label=\"sorted descending\" />\n        ) : (\n          <TriangleUpIcon aria-label=\"sorted ascending\" />\n        )\n      ) : (\n        ''\n      )}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  DataTableSort.displayName = 'DataTableSort'\n}\n\nexport interface DataTableHeaderProps<Data extends object> {\n  column: HeaderGroup<Data>\n  isSortable?: boolean\n}\nexport const DataTableHeader = <Data extends object>(\n  props: DataTableHeaderProps<Data>\n) => {\n  const { column, isSortable, ...rest } = props\n\n  let headerProps = {}\n\n  const enabled = column.disableSortBy ? false : isSortable\n\n  if (enabled) {\n    headerProps = {\n      ...column.getSortByToggleProps(),\n      className: 'chakra-table-sortable',\n    }\n  }\n\n  return (\n    <Th\n      {...column.getHeaderProps(headerProps)}\n      textTransform=\"none\"\n      width={column.width}\n      isNumeric={column.isNumeric}\n      {...rest}\n    >\n      {column.render('Header') as React.ReactNode}\n      {enabled && <DataTableSort column={column} />}\n    </Th>\n  )\n}\n\nif (__DEV__) {\n  DataTableHeader.displayName = 'DataTableHeader'\n}\n\nconst getResult = (fn: any, params: any) => {\n  if (typeof fn === 'function') {\n    return fn(params)\n  }\n  return fn\n}\n\nexport const DataTableCell = <Data extends object>({\n  value,\n  column,\n  row,\n}: CellProps<Data>) => {\n  if (column.href) {\n    const href = getResult(column.href, row.original) as string\n    return <Link href={href}>{value}</Link>\n  }\n  return value || null\n}\n\nif (__DEV__) {\n  DataTableCell.displayName = 'DataTableCell'\n}\n\nconst DataTableCheckbox = forwardRef((props, ref) => {\n  const { checked, indeterminate, ...rest } = props\n\n  return (\n    <chakra.div>\n      <Checkbox\n        ref={ref}\n        isChecked={checked}\n        isIndeterminate={indeterminate}\n        {...rest}\n      />\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  DataTableCheckbox.displayName = 'DataTableCheckbox'\n}\n\nconst useCheckboxColumn = <Data extends object>(enabled?: boolean) => {\n  return (hooks: Hooks<Data>) => {\n    enabled &&\n      hooks.visibleColumns.push((columns) => [\n        {\n          id: 'selection',\n          width: '1%',\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <DataTableCheckbox {...getToggleAllRowsSelectedProps()} />\n          ),\n          Cell: ({ row }: CellProps<Data>) => (\n            <DataTableCheckbox {...row.getToggleRowSelectedProps()} />\n          ),\n        },\n        ...columns,\n      ])\n  }\n}\n"],"names":["DataTable","React","forwardRef","props","ref","columns","data","initialState","autoResetHiddenColumns","stateReducer","useControlledState","getSubRows","defaultColumn","getRowId","manualRowSelectKey","autoResetSelectedRow","isSortable","isSelectable","onSelectedRowsChange","onSortChange","colorScheme","size","variant","className","rest","_excluded","instance","useTable","_extends","useMemo","map","column","accessor","id","Cell","DataTableCell","useSortBy","useRowSelect","useCheckboxColumn","useImperativeHandle","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","useEffect","Object","keys","selectedRowIds","sortBy","createElement","Table","sx","border","cx","Thead","headerGroup","Tr","getHeaderGroupProps","headers","DataTableHeader","key","Tbody","row","i","getRowProps","cells","cell","Td","getCellProps","overflow","whiteSpace","textOverflow","isNumeric","render","__DEV__","displayName","DataTableSort","_objectWithoutPropertiesLoose","_excluded2","chakra","span","__css","ms","isSorted","isSortedDesc","TriangleDownIcon","TriangleUpIcon","_excluded3","headerProps","disableSortBy","enabled","getSortByToggleProps","Th","getHeaderProps","textTransform","width","value","href","fn","original","Link","DataTableCheckbox","checked","indeterminate","_excluded4","div","Checkbox","isChecked","isIndeterminate","hooks","visibleColumns","push","Header","getToggleAllRowsSelectedProps","getToggleRowSelectedProps"],"mappings":"mmCAuDsBA,EAAGC,EAAMC,WAC7B,CACEC,EACAC,KAEA,MAAMC,QACJA,EAAOC,KACPA,EAAIC,aACJA,EAAYC,uBACZA,EAAsBC,aACtBA,EAAYC,mBACZA,EAAkBC,WAClBA,EAAUC,cACVA,EAAaC,SACbA,EAAQC,mBACRA,EAAkBC,qBAClBA,EAAoBC,WACpBA,EAAUC,aACVA,EAAYC,qBACZA,EAAoBC,aACpBA,EAAYC,YACZA,EAAWC,KACXA,EAAIC,QACJA,EAAOC,UACPA,GAGEpB,EADCqB,IACDrB,EAAKsB,GAEKC,EAAGC,EAAQC,EAAA,CAErBvB,QAASJ,EAAM4B,QAAQ,IACdxB,aAAAA,EAAAA,EAASyB,IAAKC,IACdA,EAAOC,WACVD,EAAOC,SAAWD,EAAOE,IAEtBF,EAAOG,OACVH,EAAOG,KAAOC,GAGlBJ,IACC,IACHzB,OACAC,eACAC,yBACAC,eACAC,qBACAE,gBACAD,aACAE,WACAC,qBACAC,wBACGS,GAELY,EACAC,EACAC,EAAkBrB,IAIpBhB,EAAMsC,oBAAoBnC,EAAK,IAAMsB,EAAU,CAACtB,IAEhD,MAAMoC,cACJA,EAAaC,kBACbA,EAAiBC,aACjBA,EAAYC,KACZA,EAAIC,WACJA,EAAUC,MACVA,GACEnB,EAUJ,OARAzB,EAAM6C,UAAU,KACd5B,MAAAA,GAAAA,EAAuB6B,OAAOC,KAAKH,EAAMI,gBAC3C,EAAG,CAAC/B,EAAsB2B,EAAMI,iBAEhChD,EAAM6C,UAAU,WACd3B,GAAAA,EAAe0B,EAAMK,OACvB,EAAG,CAAC/B,EAAc0B,EAAMK,sBAGtBjD,EAACkD,cAAAC,OACKZ,IACJ,CAAAa,GAAI,CAAE,mBAAoB,CAAEC,OAAQ,IACpC/B,UAAWgC,EAAG,kBAAmBhC,GACjCH,YAAaA,EACbC,KAAMA,EACNC,QAASA,iBAETrB,EAAAkD,cAACK,EAAK,KACHd,EAAaZ,IAAK2B,gBACjBxD,EAAAkD,cAACO,EAAOD,EAAYE,sBACjBF,EAAYG,QAAQ9B,IAAKC,gBACxB9B,EAAAkD,cAACU,EACC,CAAAC,IAAK/B,EAAOE,GACZF,OAAQA,EACRf,WAAYA,qBAMtBf,gBAAC8D,EAAUtB,IACRE,EAAKb,IAAI,CAACkC,EAAKC,KACdrB,EAAWoB,gBAET/D,EAACkD,cAAAO,EAAOM,EAAIE,cACTF,EAAIG,MAAMrC,IAAKsC,gBAEZnE,EAACkD,cAAAkB,OACKD,EAAKE,eACT,CAAAC,SAAS,SACTC,WAAW,SACXC,aAAa,WACbC,UAAWN,EAAKrC,OAAO2C,YAEtBN,EAAKO,OAAO,cAQ7B,GASFC,IACF5E,EAAU6E,YAAc,aAMbC,QACX3E,IAEA,MAAM4B,OAAEA,GAAoB5B,EAATqB,EAAIuD,EAAK5E,EAE5B6E,GAIA,MAAkB,cAAdjD,EAAOE,GACF,kBAIPhC,EAAAkD,cAAC8B,EAAOC,KAAItD,EAAA,CAACuD,MATM,CACnBC,GAAI,IAQkC5D,GACnCO,EAAOsD,SACNtD,EAAOuD,0BACLrF,gBAACsF,EAAgB,CAAC,aAAW,mCAE7BtF,gBAACuF,EAAc,CAAC,aAAW,qBAG7B,GACD,EAKHZ,IACFE,EAAcD,YAAc,iBAOjBhB,MAAeA,EAC1B1D,IAEA,MAAM4B,OAAEA,EAAMf,WAAEA,GAAwBb,EAATqB,EAAIuD,EAAK5E,EAAKsF,GAE7C,IAAeC,EAAG,CAAE,EAEpB,SAAgB3D,EAAO4D,eAAwB3E,EAS/C,OAPI4E,IACFF,EACK3D,EAAAA,CAAAA,EAAAA,EAAO8D,uBAAsB,CAChCtE,UAAW,wCAKbtB,EAAAkD,cAAC2C,EACK/D,EAAAA,CAAAA,EAAAA,EAAOgE,eAAeL,GAC1B,CAAAM,cAAc,OACdC,MAAOlE,EAAOkE,MACdvB,UAAW3C,EAAO2C,WACdlD,GAEHO,EAAO4C,OAAO,UACdiB,gBAAW3F,EAACkD,cAAA2B,EAAc,CAAA/C,OAAQA,IAAU,EAK/C6C,IACFf,EAAgBgB,YAAc,mBAGhC,MAO0B1C,EAAG,EAC3B+D,QACAnE,SACAiC,UAEA,GAAIjC,EAAOoE,KAAM,CACf,MAAMA,EAZU,mBADDC,EAaQrE,EAAOoE,MAXvBC,EAW6BpC,EAAIqC,UAR5CD,eASI,OAAOnG,EAAAkD,cAACmD,EAAK,CAAAH,KAAMA,GAAOD,EAC3B,CAfe,IAACE,EAgBjB,OAAYF,GAAI,MAGdtB,IACFzC,EAAc0C,YAAc,iBAG9B,MAAuB0B,EAAGrG,EAAW,CAACC,EAAOC,KAC3C,MAAMoG,QAAEA,EAAOC,cAAEA,GAA2BtG,EAATqB,EAAIuD,EAAK5E,EAAKuG,gBAEjD,OACEzG,EAACkD,cAAA8B,EAAO0B,IACN,kBAAA1G,EAAAkD,cAACyD,EACChF,EAAA,CAAAxB,IAAKA,EACLyG,UAAWL,EACXM,gBAAiBL,GACbjF,IAER,GAIAoD,IACF2B,EAAkB1B,YAAc,qBAGlC,MAAuBvC,EAAyBsD,GACtCmB,IACNnB,GACEmB,EAAMC,eAAeC,KAAM5G,GAAY,CACrC,CACE4B,GAAI,YACJgE,MAAO,KACPiB,OAAQ,EAAGC,gDACTlH,EAAAkD,cAACoD,EAAsBY,KAEzBjF,KAAM,EAAG8B,sBACP/D,EAAAkD,cAACoD,EAAsBvC,EAAIoD,iCAG5B/G,GACJ"}