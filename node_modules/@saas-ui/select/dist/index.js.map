{"version":3,"file":"index.js","sources":["../src/select.tsx","../src/native-select.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport {\n  chakra,\n  forwardRef,\n  Menu,\n  MenuProps,\n  MenuButton,\n  MenuList,\n  MenuListProps,\n  MenuItemOption,\n  MenuOptionGroup,\n  MenuOptionGroupProps,\n  Button,\n  ButtonProps,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemStyleObject,\n  useFormControl,\n  HTMLChakraProps,\n} from '@chakra-ui/react'\nimport { ChevronDownIcon } from '@chakra-ui/icons'\nimport { cx, __DEV__ } from '@chakra-ui/utils'\n\ninterface Option {\n  value: string\n  label?: string\n}\n\ninterface SelectOptions {\n  /**\n   * An array of options\n   * If you leave this empty the children prop will be rendered.\n   */\n  options?: Option[]\n  /**\n   * Props passed to the MenuList.\n   */\n  menuListProps?: MenuListProps\n  /**\n   * Customize how the value is rendered.\n   * @type (value?: string[]) => React.ReactElement\n   */\n  renderValue?: (value?: string[]) => React.ReactElement | undefined\n  /**\n   * Enable multiple select.\n   */\n  multiple?: boolean\n}\n\nexport interface SelectProps\n  extends Omit<MenuProps, 'children'>,\n    Pick<ButtonProps, 'isDisabled' | 'leftIcon' | 'rightIcon'>,\n    Pick<MenuOptionGroupProps, 'onChange'>,\n    SelectOptions {}\n\nconst SelectButton = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig('Input', props)\n\n  /* @ts-ignore */\n  const focusStyles = styles.field._focusVisible\n\n  const height = styles.field.h || styles.field.height\n\n  const buttonStyles: SystemStyleObject = {\n    fontWeight: 'normal',\n    textAlign: 'left',\n    color: 'inherit',\n    _active: {\n      bg: 'transparent',\n    },\n    minH: height,\n    _focus: focusStyles,\n    _expanded: focusStyles,\n    ...styles.field,\n    h: 'auto',\n  }\n\n  // Using a Button, so we can simply use leftIcon and rightIcon\n  return <MenuButton as={Button} {...props} ref={ref} sx={buttonStyles} />\n})\n\nif (__DEV__) {\n  SelectButton.displayName = 'SelectButton'\n}\n\nexport const Select = forwardRef<SelectProps, 'select'>((props, ref) => {\n  const {\n    name,\n    options,\n    children,\n    onChange,\n    defaultValue,\n    value,\n    placeholder,\n    isDisabled,\n    leftIcon,\n    rightIcon = <ChevronDownIcon />,\n    multiple,\n    size,\n    variant,\n    menuListProps,\n    renderValue = (value) => value?.join(', '),\n    ...rest\n  } = props\n  const menuProps = omitThemingProps(rest)\n\n  const [currentValue, setCurrentValue] = React.useState(value || defaultValue)\n\n  const controlProps = useFormControl({ name } as HTMLChakraProps<'input'>)\n\n  const handleChange = (value: string | string[]) => {\n    setCurrentValue(value)\n    onChange?.(value)\n  }\n\n  const buttonProps = {\n    isDisabled,\n    leftIcon,\n    rightIcon,\n    size,\n    variant,\n  }\n\n  const getDisplayValue = React.useCallback(\n    (value: string) => {\n      if (!options) {\n        return value\n      }\n\n      for (const option of options) {\n        if (option.label && option.value === value) {\n          return option.label\n        }\n      }\n\n      return value\n    },\n    [options]\n  )\n\n  const displayValue = currentValue\n    ? (Array.isArray(currentValue) ? currentValue : [currentValue]).map(\n        getDisplayValue\n      )\n    : []\n\n  return (\n    <Menu {...menuProps} closeOnSelect={!multiple}>\n      <chakra.div className={cx('saas-select')}>\n        <SelectButton ref={ref} {...buttonProps}>\n          {renderValue(displayValue) || placeholder}\n        </SelectButton>\n        <MenuList maxH=\"60vh\" overflowY=\"auto\" {...menuListProps}>\n          <MenuOptionGroup\n            defaultValue={\n              (defaultValue || value) as string | string[] | undefined\n            }\n            onChange={handleChange}\n            type={multiple ? 'checkbox' : 'radio'}\n          >\n            {options\n              ? options.map(({ value, label, ...rest }, i) => (\n                  <MenuItemOption key={i} value={value} {...rest}>\n                    {label || value}\n                  </MenuItemOption>\n                ))\n              : children}\n          </MenuOptionGroup>\n        </MenuList>\n        <chakra.input\n          {...controlProps}\n          name={name}\n          type=\"hidden\"\n          value={currentValue}\n          className=\"saas-select__input\"\n        />\n      </chakra.div>\n    </Menu>\n  )\n})\n\nif (__DEV__) {\n  Select.displayName = 'Select'\n}\n","import * as React from 'react'\n\nimport {\n  forwardRef,\n  Select as ChakraSelect,\n  SelectProps as ChakraSelectProps,\n} from '@chakra-ui/react'\nimport { __DEV__ } from '@chakra-ui/utils'\n\ninterface Option {\n  value: string\n  label?: string\n}\n\ninterface NativeSelectOptions {\n  options?: Option[]\n}\n\nexport interface NativeSelectProps\n  extends ChakraSelectProps,\n    NativeSelectOptions {}\n\nexport const NativeSelect = forwardRef<NativeSelectProps, 'select'>(\n  ({ options, children, ...props }, ref) => {\n    return (\n      <ChakraSelect ref={ref} {...props}>\n        {children ||\n          options?.map(({ value, label }) => {\n            return (\n              <option key={value} value={value}>\n                {label || value}\n              </option>\n            )\n          })}\n      </ChakraSelect>\n    )\n  }\n)\n\nif (__DEV__) {\n  NativeSelect.displayName = 'NativeSelect'\n}\n"],"names":["_excluded","_excluded2","SelectButton","forwardRef","props","ref","styles","useMultiStyleConfig","focusStyles","field","_focusVisible","fontWeight","textAlign","color","_active","bg","minH","h","height","_focus","_expanded","React","createElement","MenuButton","_extends","as","Button","sx","buttonStyles","__DEV__","displayName","Select","name","options","children","onChange","defaultValue","value","placeholder","isDisabled","leftIcon","_props$rightIcon","rightIcon","ChevronDownIcon","multiple","size","variant","menuListProps","renderValue","_props$renderValue","join","rest","_objectWithoutPropertiesLoose","menuProps","omitThemingProps","useState","currentValue","setCurrentValue","_React$useState","controlProps","useFormControl","buttonProps","getDisplayValue","useCallback","_step","_iterator","_createForOfIteratorHelperLoose","done","option","label","displayValue","Array","isArray","map","Menu","closeOnSelect","chakra","div","className","cx","MenuList","maxH","overflowY","MenuOptionGroup","type","_ref","i","MenuItemOption","key","input","NativeSelect","ChakraSelect","_ref2"],"mappings":"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"}